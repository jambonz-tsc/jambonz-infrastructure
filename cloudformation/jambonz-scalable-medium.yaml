---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AllowedSbcCidrPar:
    Type: String
  AllowedSmppCidrPar:
    Type: String
  AllowedHttpCidrPar:
    Type: String
  AuroraUsernamePar:
    Type: String
  AuroraMaxCapacity:
    Type: String
  AuroraMinCapacity:
    Type: String
  AuroraPasswordPar:
    NoEcho: True
    Type: String
  CloudWatchLogRetentionPar:
    Description: "Number of days to retain cloudwatch logs"
    Type: String
  DatabaseSubnetGroupPar:
    Type: String
  DbCachingTTSPar:
    Description: Number of seconds to cache results from DB queries (0 = no caching)
    Type: Number
  ElastiCacheNodeTypePar:
    Type: String
  ElastiCacheSubnetGroupPar:
    Type: String
  EncryptionSecretPar:
    Description: "Secret to use for encrypting jwt and other data"
    Type: String
  EnvironmentPar:
    Type: String
  FeatureServerAmiIdPar:
    Type: AWS::EC2::Image::Id
  FeatureServerInstanceTypePar:
    Type: String
  ReferenceNamePar:
    Type: String
  SbcInstanceTypePar:
    Type: String
  SbcServerAmiPar:
    Type: AWS::EC2::Image::Id
  VpcCidrPar:
    Default: '10.105.168.0/22'
    Description: 'CIDR of the VPC'
    Type: String
  WebMonitoringServerAmiPar:
    Type: AWS::EC2::Image::Id
  WebMonitoringServerDnsPar:
    Type: String
  WebMonitoringServerInstanceTypePar:
    Type: String

Resources:
  ### EC2 ###
  WebMonitoringServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref WebMonitoringServerIamInstanceProfile
      ImageId: !Ref WebMonitoringServerAmiPar
      InstanceType: !Ref WebMonitoringServerInstanceTypePar
      KeyName: !Sub '${ReferenceNamePar}-${EnvironmentPar}'
      Monitoring: true
      SecurityGroupIds:
        - Ref: SshSecurityGroup
        - Ref: WebMonitoringServerSecurityGroup
      SubnetId: !ImportValue VPC1-AZ1Subnet1
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              #!/bin/bash -xe
            
              echo "running jambonz web and monitoring server user data script"            
              echo "seeding database.."
              INSTANCE_ID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)" 
              mysql -h ${JAMBONES_MYSQL_HOST} -u admin -D jambones -p${JAMBONES_MYSQL_PASSWORD} < /home/admin/apps/jambonz-api-server/db/jambones-sql.sql
              sudo sed -i 's/public-apps.jambonz.cloud/public-apps.${URLPortal}/g' /home/admin/apps/jambonz-api-server/db/seed-production-database-open-source.sql
              mysql -h ${JAMBONES_MYSQL_HOST} -u admin -D jambones -p${JAMBONES_MYSQL_PASSWORD} < /home/admin/apps/jambonz-api-server/db/seed-production-database-open-source.sql
              JAMBONES_ADMIN_INITIAL_PASSWORD=$INSTANCE_ID JAMBONES_MYSQL_HOST=${JAMBONES_MYSQL_HOST} JAMBONES_MYSQL_USER=admin JAMBONES_MYSQL_PASSWORD=${JAMBONES_MYSQL_PASSWORD} JAMBONES_MYSQL_DATABASE=jambones /home/admin/apps/jambonz-api-server/db/reset_admin_password.js

              # add row to system information table 
              mysql -h ${JAMBONES_MYSQL_HOST} -u admin -D jambones -p${JAMBONES_MYSQL_PASSWORD} -e $'insert into system_information (domain_name, sip_domain_name, monitoring_domain_name) values ('\'''"${URLPortal}"''\'', '\''sip.'"${URLPortal}"''\'', '\''grafana.'"${URLPortal}"''\'')'

              # jambonz webapp
              echo "configuring webapp.."
              echo "VITE_API_BASE_URL=http://${URLPortal}/api/v1" > /home/admin/apps/jambonz-webapp/.env 
              API_BASE_URL=http://${URLPortal}/api/v1 TAG="<script>window.JAMBONZ = { API_BASE_URL: '$API_BASE_URL'};</script>"
              sed -i -e "\@</head>@i\ $TAG" /home/admin/apps/jambonz-webapp/dist/index.html
        
              echo "writing /home/admin/apps/ecosystem.config.js.."
              cat << EOF > /home/admin/apps/ecosystem.config.js
              module.exports = {
                apps : [
                {
                  name: 'jambonz-api-server',
                  cwd: '/home/admin/apps/jambonz-api-server',
                  script: 'app.js',
                  out_file: '/home/admin/.pm2/logs/jambonz-api-server.log',
                  err_file: '/home/admin/.pm2/logs/jambonz-api-server.log',
                  combine_logs: true,
                  instance_var: 'INSTANCE_ID',
                  exec_mode: 'cluster',
                  instances: 0,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    JAMBONES_LOGLEVEL: 'info',
                    JWT_SECRET: '${JWT_SECRET}',
                    AWS_REGION: '${AWS_REGION}',
                    AUTHENTICATION_KEY: '${JWT_SECRET}',
                    JAMBONES_MYSQL_REFRESH_TTL: ${DbCachingTTS},
                    JAMBONES_MYSQL_HOST: '${JAMBONES_MYSQL_HOST}',
                    JAMBONES_MYSQL_USER: '${JAMBONES_MYSQL_USER}',
                    JAMBONES_MYSQL_PASSWORD: '${JAMBONES_MYSQL_PASSWORD}',
                    JAMBONES_MYSQL_DATABASE: 'jambones',
                    JAMBONES_MYSQL_CONNECTION_LIMIT: 10,
                    JAMBONES_REDIS_HOST: '${JAMBONES_REDIS_HOST}',
                    JAMBONES_REDIS_PORT: 6379,
                    JAMBONE_API_VERSION: 'v1',
                    JAMBONES_TIME_SERIES_HOST: '127.0.0.1',
                    ENABLE_METRICS: 1,
                    STATS_HOST: '127.0.0.1',
                    STATS_PORT: 8125,
                    STATS_PROTOCOL: 'tcp',
                    STATS_TELEGRAF: 1,
                    STATS_SAMPLE_RATE: 1,
                    HTTP_PORT: 3000,
                    JAEGER_BASE_URL: 'http://127.0.0.1:16686',
                    HOMER_BASE_URL: 'http://127.0.0.1:9080',
                    HOMER_USERNAME: 'admin',
                    HOMER_PASSWORD: 'sipcapture',
                    JAMBONZ_RECORD_WS_USERNAME: 'jambonz',
                    JAMBONZ_RECORD_WS_PASSWORD: '${JWT_SECRET}'
                    },
                },
                {
                  name: 'jambonz-webapp',
                  script: 'npm',
                  cwd: '/home/admin/apps/jambonz-webapp',
                  args: 'run serve'
                },
                {
                  name: 'public-apps',
                  cwd: '/home/admin/apps/public-apps',
                  script: 'app.js',
                  out_file: '/home/admin/.pm2/logs/public-apps',
                  err_file: '/home/admin/.pm2/logs/public-apps',
                  combine_logs: true,
                  instance_var: 'INSTANCE_ID',
                  exec_mode: 'fork',
                  instances: 1,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    LOGLEVEL: 'info',
                    HTTP_PORT: 3011,
                    NRC_TIME_SERVICE_DID: '+16137451576'
                  }
                }]
              };
              EOF
            
              echo "finished writing config file"

              echo "building jambonz-api-server"
              sudo -u admin bash -c "cd /home/admin/apps/jambonz-api-server && npm ci"

              sudo -u admin bash -c "pm2 start /home/admin/apps/ecosystem.config.js"
              sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u admin --hp /home/admin
              sudo -u admin bash -c "pm2 save"
              sudo systemctl enable pm2-admin.service
            
              # configure telegraph to send to the monitoring server
              sudo sed -i -e "s/influxdb:8086/127.0.0.1:8086/g"  /etc/telegraf/telegraf.conf
              sudo systemctl restart telegraf
                                        
              sudo cat << EOF > /etc/nginx/sites-available/default 
              server {
                  listen 80;
                  server_name ${URLPortal};
                  location /api/ {
                      rewrite ^/api/(.*)$ /\$1 break;
                      proxy_pass http://localhost:3000;
                      proxy_set_header Host \$host;
                  }
                  location / {
                      proxy_pass http://localhost:3001;
                      proxy_set_header Host \$host;
                  }
              }
              server {
                  listen 80;
                  server_name api.${URLPortal};
                  location / {
                      proxy_pass http://localhost:3000;
                      proxy_set_header Host \$host;
                  }
              }
              server {
                listen 80;
                server_name grafana.${URLPortal}; 
                location / {
                  proxy_pass http://127.0.0.1:3010; 
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                }
              }
              server {
                listen 80;
                server_name homer.${URLPortal}; 
                location / {
                  proxy_pass http://127.0.0.1:9080; 
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                }
              }
              server {
                listen 80;
                server_name public-apps.${URLPortal}; 
                location / {
                  proxy_pass http://127.0.0.1:3011; 
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                }
              }
              EOF
            
              sudo systemctl restart nginx

              # enable cloudwatch
              echo "Enabling Cloudwatch for jambonz logs"
              sudo sed -i -e "s/retention_in_days\": 3/retention_in_days\": ${CloudwatchLogRetention}/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json 
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
            
              sudo systemctl restart heplify-server.service

              # restart cassandra and give it time to come up
              echo "restarting cassandra.."
              sudo systemctl restart cassandra.service        
              sleep 60
              echo "restarting jaeger"
              sudo systemctl restart jaeger-collector.service
              sudo systemctl restart jaeger-query.service

              echo "web + monitoring server user data script completed"
            - JAMBONES_MYSQL_HOST: !GetAtt AuroraCluster.Endpoint.Address
              JAMBONES_MYSQL_USER: !Ref AuroraUsernamePar
              JAMBONES_MYSQL_PASSWORD: !Ref AuroraPasswordPar
              JAMBONES_REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
              AWS_REGION: !Ref AWS::Region
              JWT_SECRET: !Ref EncryptionSecretPar
              URLPortal: !Ref WebMonitoringServerDnsPar
              CloudwatchLogRetention: !Ref CloudWatchLogRetentionPar
              DbCachingTTS: !Ref DbCachingTTSPar

  # Security Groups
  SshSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for jambonz servers'
      GroupName: !Sub ${ReferenceNamePar}-${EnvironmentPar}-jambonz-ssh-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.95.0.0/16 # WIP einschränken
          Description: Allow SSH access
      VpcId: !ImportValue VPC1-VPC-ID

  WebMonitoringServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for jambonz web and monitoring server'
      GroupName: !Sub '${ReferenceNamePar}-${EnvironmentPar}-jambonz-web-monitoring-sg'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '10.0.0.0/8' # WIP einschränken
          Description: 'Allow HTTP access'
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref FeatureServerSecurityGroup
          Description: 'Allow access from feature servers'
        - IpProtocol: 'tcp'
          FromPort: 3000
          ToPort: 3000
          CidrIp: '10.0.0.0/8' # WIP einschränken
          Description: 'Allow API access'
        - IpProtocol: 'tcp'
          FromPort: 4000
          ToPort: 4000
          CidrIp: '10.0.0.0/8' # WIP einschränken
          Description: 'Allow Grafana access'
        - IpProtocol: tcp
          FromPort: 8086
          ToPort: 8086
          CidrIp: '10.0.0.0/8' # WIP einschränken
          Description: 'Allow InfluxDB access from VPC'
      VpcId: !ImportValue VPC1-VPC-ID

  SbcSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jambonz Sbc Server
      GroupName: !Sub '${ReferenceNamePar}-{EnvironmentPar}-jambonz-sbc-sg'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 3000
          ToPort: 3009
          CidrIp: !Ref VpcCidrPar
          Description: 'Allow internal http traffic (e.g. from api server)'
        - IpProtocol: 'tcp'
          FromPort: 3010
          ToPort: 3019
          CidrIp: !Ref AllowedHttpCidrPar
          Description: 'Allow http access from AWS SNS'
        - IpProtocol: 'tcp'
          FromPort: 5060
          ToPort: 5061
          CidrIp: !Ref AllowedSbcCidrPar
          Description: 'Allow sip (tcp and tls) from Internet'
        - IpProtocol: 'udp'
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref AllowedSbcCidrPar
          Description: 'Allow sip (udp) from Internet'
        - IpProtocol: 'tcp'
          FromPort: 8443
          ToPort: 8443
          Description: 'Allow sip (wss) from Internet'
          CidrIp: !Ref AllowedSbcCidrPar
        - IpProtocol: tcp
          FromPort: 2775
          ToPort: 2775
          CidrIp: !Ref AllowedSmppCidrPar
          Description: 'Allow SMPP/tcp from Internet'
        - IpProtocol: 'tcp'
          FromPort: 3550
          ToPort: 3550
          CidrIp: !Ref AllowedSmppCidrPar
          Description: 'Allow SMPP/tls from Internet'
        - IpProtocol: 'tcp'
          FromPort: 3020
          ToPort: 3020
          SourceSecurityGroupId: !Ref FeatureServerSecurityGroup
          Description: 'Allow HTTP access from VPC to jambonz-smpp-esme'
        - IpProtocol: 'udp'
          FromPort: 40000
          ToPort: 60000
          CidrIp: !Ref AllowedSbcCidrPar
          Description: 'Allow RTP'
        - IpProtocol: udp
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref VpcCidrPar
          Description: 'Allow Freeswitch sip from VPC'
        - IpProtocol: udp
          FromPort: 22222
          ToPort: 22223
          CidrIp: !Ref VpcCidrPar
          Description: 'Allow rtpengine ng protocol from VPC'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref VpcCidrPar
          Description: 'rtpengine ws protocol from VPC'
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: !Ref AllowedHttpCidrPar
          Description: 'Allow http access from AWS SNS'
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: !Ref VpcCidrPar
          Description: Allow access to prometheus scrape port from VPC
        - IpProtocol: udp
          FromPort: 22224
          ToPort: 22233
          CidrIp: !Ref VpcCidrPar
          Description: Allow dtmf events from rtpengine-sidecar in the VPC
      VpcId: !ImportValue VPC1-VPC-ID

  FeatureServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jambonz Feature Server
      GroupName: !Sub '${ReferenceNamePar}-{EnvironmentPar}-jambonz-feature-sg'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3009
          CidrIp: !Ref VpcCidrPar
          Description: Allow HTTP from sbc/api server
        - IpProtocol: tcp
          FromPort: 3010
          ToPort: 3019
          CidrIp: !Ref AllowedHttpCidrPar
          Description: Allow http access from AWS SNS
        - IpProtocol: tcp
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref VpcCidrPar
          Description: Allow sip from VPC
        - IpProtocol: udp
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref VpcCidrPar
          Description: Allow sip from VPC
        - IpProtocol: udp
          FromPort: 25000
          ToPort: 40000
          CidrIp: !Ref VpcCidrPar
          Description: rtp
      VpcId: !ImportValue VPC1-VPC-ID

  AuroraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jambonz Aurora
      GroupName: !Sub '${ReferenceNamePar}-jambonz-aurora-sg'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VpcCidrPar
          Description: Allow HTTP traffic from VPC
      VpcId: !ImportValue VPC1-VPC-ID


  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for jambonz Redis
      GroupName: !Sub '${ReferenceNamePar}-elasticache-sg'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref VpcCidrPar
          Description: Allow traffic from VPC
      VpcId: !ImportValue VPC1-VPC-ID

  ### RDS ###
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${ReferenceNamePar}-${EnvironmentPar}-jambonz-cluster'
      Engine: aurora-mysql
      EngineMode: serverless
      EngineVersion: 5.7
      MasterUsername: !Ref AuroraUsernamePar
      MasterUserPassword: !Ref AuroraPasswordPar
      DatabaseName: 'jambones'
      BackupRetentionPeriod: 5
      PreferredBackupWindow: 07:00-09:00
      DBSubnetGroupName: !Ref DatabaseSubnetGroupPar
      VpcSecurityGroupIds:
        - !Ref AuroraSecurityGroup
      ScalingConfiguration:
        AutoPause: false
        MaxCapacity: !Ref AuroraMaxCapacity
        MinCapacity: !Ref AuroraMinCapacity

  ### ElastiCache ###
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      EngineVersion: 5.0.6
      CacheNodeType: !Ref ElastiCacheNodeTypePar
      ClusterName : !Sub '${ReferenceNamePar}-${EnvironmentPar}-elasticache-cluster'
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroupPar
      CacheParameterGroupName: default.redis5.0
      VpcSecurityGroupIds:
        - !GetAtt ElastiCacheSecurityGroup.GroupId
      Port: 6379

  ### Auto Scaling Groups ###
  # FeatureServer
  FeatureServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ReferenceNamePar}-${EnvironmentPar}-feature-server-asg'
      LaunchConfigurationName: !Ref FeatureServerConfig
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 1
      TerminationPolicies:
        - OldestInstance
      VPCZoneIdentifier: 
        - !ImportValue VPC1-AZ1Subnet1
        - !ImportValue VPC1-AZ2Subnet1

  FeatureServerPlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: spread
  
  FeatureServerConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref FeatureServerAmiIdPar
      SecurityGroups:
        - Ref: SshSecurityGroup
        - Ref: FeatureServerSecurityGroup
      InstanceType: !Ref FeatureServerInstanceTypePar
      IamInstanceProfile: !Ref FeatureServerInstanceProfile
      KeyName: !Sub '${ReferenceNamePar}-${EnvironmentPar}'
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              #!/bin/bash -e
              #
              echo "running jambonz user data script"   
              echo "writing /home/admin/apps/ecosystem.config.js.."
              
              cat << EOF > /home/admin/apps/ecosystem.config.js
              module.exports = {
              apps : [
              {
                  name: 'jambonz-feature-server',
                  cwd: '/home/admin/apps/jambonz-feature-server',
                  script: 'app.js',
                  instance_var: 'INSTANCE_ID',
                  out_file: '/home/admin/.pm2/logs/jambonz-feature-server.log',
                  err_file: '/home/admin/.pm2/logs/jambonz-feature-server.log',
                  exec_mode: 'fork',
                  instances: 'max',
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    JAMBONES_LOGLEVEL: 'info',
                    JAMBONES_TTS_TRIM_SILENCE: 1,
                    JWT_SECRET: '${JWT_SECRET}',
                    AWS_REGION: '${AWS_REGION}',
                    JAMBONES_API_BASE_URL: 'http://${URLPortal}/v1',
                    ENABLE_METRICS: 1,
                    STATS_HOST: '127.0.0.1',
                    STATS_PORT: 8125,
                    STATS_PROTOCOL: 'tcp',
                    STATS_TELEGRAF: 1,
                    STATS_SAMPLE_RATE: 1,
                    JAMBONES_OTEL_ENABLED: 1,
                    OTEL_EXPORTER_JAEGER_ENDPOINT: 'http://${WebMonitoringServerPrivateIP}:14268/api/traces',
                    OTEL_EXPORTER_OTLP_METRICS_INSECURE: 1,
                    OTEL_EXPORTER_JAEGER_GRPC_INSECURE: 1,
                    AWS_REGION: '${AWS_REGION}',
                    JAMBONES_NETWORK_CIDR: '${VPC_CIDR}',
                    JAMBONES_MYSQL_REFRESH_TTL: ${DbCachingTTS},
                    JAMBONES_MYSQL_HOST: '${JAMBONES_MYSQL_HOST}',
                    JAMBONES_MYSQL_USER: '${JAMBONES_MYSQL_USER}',
                    JAMBONES_MYSQL_PASSWORD: '${JAMBONES_MYSQL_PASSWORD}',
                    JAMBONES_MYSQL_DATABASE: 'jambones',
                    JAMBONES_MYSQL_CONNECTION_LIMIT: 10,
                    JAMBONES_REDIS_HOST: '${JAMBONES_REDIS_HOST}',
                    JAMBONES_REDIS_PORT: 6379,
                    JAMBONES_LOGLEVEL: 'info',
                    JAMBONES_TIME_SERIES_HOST: '${WebMonitoringServerPrivateIP}',
                    HTTP_PORT: 3000,
                    HTTP_PORT_MAX: 3009,
                    AWS_SNS_PORT: 3010,
                    AWS_SNS_PORT_MAX: 3019,
                    DRACHTIO_HOST: '127.0.0.1',
                    DRACHTIO_PORT: 9022,
                    DRACHTIO_SECRET: 'cymru',
                    JAMBONES_FEATURE_SERVERS: '127.0.0.1:9022:cymru',
                    JAMBONES_FREESWITCH: '127.0.0.1:8021:JambonzR0ck$',
                    AUTHENTICATION_KEY: '${JWT_SECRET}',
                    JAMBONZ_RECORD_WS_USERNAME: 'jambonz',
                    JAMBONZ_RECORD_WS_PASSWORD: '${JWT_SECRET}',
                    JAMBONZ_RECORD_WS_BASE_URL: 'ws://${WebMonitoringServerPrivateIP}:3000/api/v1'
                  }
                }]
              };
              EOF
            
              echo "finished writing config file"
            
              sudo -u admin bash -c "pm2 start /home/admin/apps/ecosystem.config.js"
              sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u admin --hp /home/admin
              sudo -u admin bash -c "pm2 save"
              sudo systemctl enable pm2-admin.service
            
              # configure telegraph to send to the monitoring server
              sudo sed -i -e "s/influxdb:8086/${WebMonitoringServerPrivateIP}:8086/g"  /etc/telegraf/telegraf.conf
              sudo systemctl restart telegraf

              # enable cloudwatch
              echo "Enabling Cloudwatch for jambonz logs"
              sudo sed -i -e "s/retention_in_days\": 3/retention_in_days\": ${CloudwatchLogRetention}/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json 
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json

              echo "user data script completed"
            - VPC_CIDR: !Ref VpcCidrPar
              JAMBONES_MYSQL_HOST: !GetAtt AuroraCluster.Endpoint.Address
              JAMBONES_MYSQL_USER: !Ref AuroraUsernamePar
              JAMBONES_MYSQL_PASSWORD: !Ref AuroraPasswordPar
              JAMBONES_REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
              AWS_REGION: !Ref AWS::Region
              URLPortal: !Ref WebMonitoringServerDnsPar
              JWT_SECRET: !Ref EncryptionSecretPar
              CloudwatchLogRetention: !Ref CloudWatchLogRetentionPar
              DbCachingTTS: !Ref DbCachingTTSPar
              WebMonitoringServerPrivateIP: !GetAtt WebMonitoringServer.PrivateIp

  # SbcServer
  SbcServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ReferenceNamePar}-${EnvironmentPar}-sbc-sip-asg'
      LaunchConfigurationName: !Ref SbcConfig
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 1
      TerminationPolicies:
        - OldestInstance
      VPCZoneIdentifier: 
        - !ImportValue VPC1-AZ1Subnet1
        - !ImportValue VPC1-AZ2Subnet1

  SbcConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref SbcServerAmiPar
      SecurityGroups:
        - Ref: SshSecurityGroup
        - Ref: SbcSecurityGroup
      InstanceType: !Ref SbcInstanceTypePar
      IamInstanceProfile: !Ref SbcServerInstanceProfile
      KeyName: !Sub '${ReferenceNamePar}-${EnvironmentPar}'
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              #!/bin/bash
              echo "running jambonz user data script"

              echo "rewriting drachtio.service file.."
              cat << EOF > /etc/systemd/system/drachtio.service
              [Unit]
              Description=drachtio
              After=syslog.target network.target local-fs.target

              [Service]
              ; service
              Type=forking
              ExecStartPre=/bin/sh -c 'systemctl set-environment LOCAL_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`'
              ExecStart=/usr/local/bin/drachtio --daemon \
              --contact sip:${LOCAL_IP}:5060;transport=udp,tcp \
              --address 0.0.0.0 --port 9022 --homer 127.0.0.1:9060 --homer-id 10
              TimeoutSec=15s
              Restart=always
              ; exec
              User=root
              Group=daemon
              LimitCORE=infinity
              LimitNOFILE=100000
              LimitNPROC=60000
              ;LimitSTACK=240
              LimitRTPRIO=infinity
              LimitRTTIME=7000000
              IOSchedulingClass=realtime
              IOSchedulingPriority=2
              CPUSchedulingPolicy=rr
              CPUSchedulingPriority=89
              UMask=0007

              [Install]
              WantedBy=multi-user.target

              EOF
              echo "finished rewriting drachtio.service file"

              echo "rewriting rtpengine.service file.."
              cat << EOF > /etc/systemd/system/drachtio.service
              [Unit]
              Description=rtpengine
              After=syslog.target network.target local-fs.target

              [Service]
              ; service
              Type=forking
              Environment="LD_LIBRARY_PATH=/usr/local/lib/"
              ExecStartPre=/bin/sh -c 'systemctl set-environment LOCAL_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`'
              ExecStartPre=echo 'del 42' > /proc/rtpengine/control
              ExecStart=/usr/local/bin/rtpengine \
              --interface private/${LOCAL_IP} \
              --interface public/${LOCAL_IP} \
              --listen-ng=22222 \
              --listen-http=8080 \
              --listen-udp=12222 \
              --dtmf-log-dest=127.0.0.1:22223 \
              --listen-cli=127.0.0.1:9900 \
              --table=42 \
              --pidfile /run/rtpengine.pid \
              --port-min 40000 \
              --port-max 60000 \
              --recording-dir /var/spool/recording \
              --recording-method proc \
              --log-level 5 \
              --delete-delay 0
              PIDFile=/run/rtpengine.pid
              TimeoutSec=15s
              Restart=always
              ; exec
              User=root
              Group=daemon
              LimitCORE=infinity
              LimitNOFILE=100000
              LimitNPROC=60000
              ;LimitSTACK=240
              LimitRTPRIO=infinity
              LimitRTTIME=7000000
              IOSchedulingClass=realtime
              IOSchedulingPriority=2
              CPUSchedulingPolicy=rr
              CPUSchedulingPriority=89
              UMask=0007

              [Install]
              WantedBy=multi-user.target
              EOF
              echo "finished rewriting rtpengine.service file"

              echo "writing /home/admin/apps/ecosystem.config.js.."
              cat << EOF > /home/admin/apps/ecosystem.config.js
              module.exports = {
                apps : [
                {
                  name: 'jambonz-smpp-esme',
                  cwd: '/home/admin/apps/jambonz-smpp-esme',
                  script: 'app.js',
                  out_file: '/home/admin/.pm2/logs/jambonz-smpp-esme.log',
                  err_file: '/home/admin/.pm2/logs/jambonz-smpp-esme.log',
                  combine_logs: true,
                  instance_var: 'INSTANCE_ID',
                  exec_mode: 'fork',
                  instances: 1,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    JAMBONES_LOGLEVEL: 'info',
                    AVOID_UDH: true,
                    JAMBONES_MYSQL_REFRESH_TTL: ${DbCachingTTS},
                    JAMBONES_MYSQL_HOST: '${JAMBONES_MYSQL_HOST}',
                    JAMBONES_MYSQL_USER: '${JAMBONES_MYSQL_USER}',
                    JAMBONES_MYSQL_PASSWORD: '${JAMBONES_MYSQL_PASSWORD}',
                    JAMBONES_MYSQL_DATABASE: 'jambones',
                    JAMBONES_MYSQL_CONNECTION_LIMIT: 10,
                    JAMBONES_REDIS_HOST: '${JAMBONES_REDIS_HOST}',
                    JAMBONES_REDIS_PORT: 6379,
                    HTTP_PORT: 3020
                  }
                },                  
                {
                  name: 'sbc-sip-sidecar',
                  cwd: '/home/admin/apps/sbc-sip-sidecar',
                  script: 'app.js',
                  instance_var: 'INSTANCE_ID',
                  out_file: '/home/admin/.pm2/logs/sbc-sip-sidecar.log',
                  err_file: '/home/admin/.pm2/logs/sbc-sip-sidecar.log',
                  exec_mode: 'fork',
                  instances: 1,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    JAMBONES_LOGLEVEL: 'info',
                    JWT_SECRET: '${JWT_SECRET}',
                    RTPENGINE_PING_INTERVAL: 30000,
                    DRACHTIO_HOST: '127.0.0.1',
                    DRACHTIO_PORT: 9022,
                    DRACHTIO_SECRET: 'cymru',
                    JAMBONES_MYSQL_REFRESH_TTL: ${DbCachingTTS},
                    JAMBONES_MYSQL_HOST: '${JAMBONES_MYSQL_HOST}',
                    JAMBONES_MYSQL_USER: '${JAMBONES_MYSQL_USER}',
                    JAMBONES_MYSQL_PASSWORD: '${JAMBONES_MYSQL_PASSWORD}',
                    JAMBONES_MYSQL_DATABASE: 'jambones',
                    JAMBONES_MYSQL_CONNECTION_LIMIT: 10,
                    JAMBONES_REDIS_HOST: '${JAMBONES_REDIS_HOST}',
                    JAMBONES_REDIS_PORT: 6379,
                    JAMBONES_TIME_SERIES_HOST: '${WebMonitoringServerPrivateIP}',
                    ENABLE_METRICS: 1,
                    STATS_HOST: '127.0.0.1',
                    STATS_PORT: 8125,
                    STATS_PROTOCOL: 'tcp',
                    STATS_TELEGRAF: 1,
                    STATS_SAMPLE_RATE: 1,
                    JAMBONES_NETWORK_CIDR: '${VPC_CIDR}'
                  }
                },
                {
                  name: 'sbc-rtpengine-sidecar',
                  cwd: '/home/admin/apps/sbc-rtpengine-sidecar',
                  script: 'app.js',
                  instance_var: 'INSTANCE_ID',
                  out_file: '/home/admin/.pm2/logs/jambonz-sbc-rtpengine-sidecar.log',
                  err_file: '/home/admin/.pm2/logs/jambonz-sbc-rtpengine-sidecar.log',
                  exec_mode: 'fork',
                  instances: 1,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    LOGLEVEL: 'info',
                    DTMF_ONLY: true,
                    RTPENGINE_DTMF_LOG_PORT: 22223,
                    ENABLE_METRICS: 1,
                    STATS_HOST: '127.0.0.1',
                    STATS_PORT: 8125,
                    STATS_PROTOCOL: 'tcp',
                    STATS_SAMPLE_RATE:1,
                    STATS_TELEGRAF: 1
                  }
                },
                {
                  name: 'sbc-call-router',
                  cwd: '/home/admin/apps/sbc-call-router',
                  script: 'app.js',
                  instance_var: 'INSTANCE_ID',
                  out_file: '/home/admin/.pm2/logs/jambonz-sbc-call-router.log',
                  err_file: '/home/admin/.pm2/logs/jambonz-sbc-call-router.log',
                  exec_mode: 'fork',
                  instances: 1,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    JAMBONES_LOGLEVEL: 'info',
                    HTTP_PORT: 4000,
                    JAMBONES_INBOUND_ROUTE: '127.0.0.1:4002',
                    JAMBONES_OUTBOUND_ROUTE: '127.0.0.1:4003',
                    JAMBONZ_TAGGED_INBOUND: 1,
                    ENABLE_METRICS: 1,
                    STATS_HOST: '127.0.0.1',
                    STATS_PORT: 8125,
                    STATS_PROTOCOL: 'tcp',
                    STATS_TELEGRAF: 1,
                    STATS_SAMPLE_RATE: 1,
                    JAMBONES_NETWORK_CIDR: '${VPC_CIDR}'
                  }
                },
                {
                  name: 'sbc-outbound',
                  cwd: '/home/admin/apps/sbc-outbound',
                  script: 'app.js',
                  instance_var: 'INSTANCE_ID',
                  out_file: '/home/admin/.pm2/logs/jambonz-sbc-outbound.log',
                  err_file: '/home/admin/.pm2/logs/jambonz-sbc-outbound.log',
                  exec_mode: 'fork',
                  instances: 1,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    JAMBONES_LOGLEVEL: 'info',
                    JWT_SECRET: '${JWT_SECRET}',
                    JAMBONES_NETWORK_CIDR: '${VPC_CIDR}',
                    JAMBONES_RTPENGINE_UDP_PORT: 6000,
                    JAMBONES_RTPENGINES: '127.0.0.1:22222',
                    MIN_CALL_LIMIT: 9999,
                    RTPENGINE_PING_INTERVAL: 30000,
                    DRACHTIO_HOST: '127.0.0.1',
                    DRACHTIO_PORT: 9022,
                    DRACHTIO_SECRET: 'cymru',
                    JAMBONES_MYSQL_REFRESH_TTL: ${DbCachingTTS},
                    JAMBONES_MYSQL_HOST: '${JAMBONES_MYSQL_HOST}',
                    JAMBONES_MYSQL_USER: '${JAMBONES_MYSQL_USER}',
                    JAMBONES_MYSQL_PASSWORD: '${JAMBONES_MYSQL_PASSWORD}',
                    JAMBONES_MYSQL_DATABASE: 'jambones',
                    JAMBONES_MYSQL_CONNECTION_LIMIT: 10,
                    JAMBONES_REDIS_HOST: '${JAMBONES_REDIS_HOST}',
                    JAMBONES_REDIS_PORT: 6379,
                    JAMBONES_TIME_SERIES_HOST: '${WebMonitoringServerPrivateIP}',
                    JAMBONES_TRACK_ACCOUNT_CALLS: 0,
                    JAMBONES_TRACK_SP_CALLS: 0,
                    JAMBONES_TRACK_APP_CALLS: 0,
                    ENABLE_METRICS: 1,
                    STATS_HOST: '127.0.0.1',
                    STATS_PORT: 8125,
                    STATS_PROTOCOL: 'tcp',
                    STATS_SAMPLE_RATE:1,
                    STATS_TELEGRAF: 1
                  }
                },
                {
                  name: 'sbc-inbound',
                  cwd: '/home/admin/apps/sbc-inbound',
                  script: 'app.js',
                  instance_var: 'INSTANCE_ID',
                  out_file: '/home/admin/.pm2/logs/jambonz-sbc-inbound.log',
                  err_file: '/home/admin/.pm2/logs/jambonz-sbc-inbound.log',
                  exec_mode: 'fork',
                  instances: 'max',
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G',
                  env: {
                    JAMBONES_LOGLEVEL: 'info',
                    JWT_SECRET: '${JWT_SECRET}',
                    AWS_REGION: '${AWS_REGION}',
                    JAMBONES_NETWORK_CIDR: '${VPC_CIDR}',
                    JAMBONES_RTPENGINE_UDP_PORT: 7000,
                    JAMBONES_RTPENGINES: '127.0.0.1:22222',
                    DRACHTIO_HOST: '127.0.0.1',
                    DRACHTIO_PORT: 9022,
                    DRACHTIO_SECRET: 'cymru',
                    HTTP_PORT: 3000,
                    HTTP_PORT_MAX: 3009,
                    AWS_SNS_PORT: 3010,
                    AWS_SNS_PORT_MAX: 3019,
                    JAMBONES_MYSQL_REFRESH_TTL: ${DbCachingTTS},
                    JAMBONES_MYSQL_HOST: '${JAMBONES_MYSQL_HOST}',
                    JAMBONES_MYSQL_USER: '${JAMBONES_MYSQL_USER}',
                    JAMBONES_MYSQL_PASSWORD: '${JAMBONES_MYSQL_PASSWORD}',
                    JAMBONES_MYSQL_DATABASE: 'jambones',
                    JAMBONES_MYSQL_CONNECTION_LIMIT: 10,
                    JAMBONES_REDIS_HOST: '${JAMBONES_REDIS_HOST}',
                    JAMBONES_REDIS_PORT: 6379,
                    JAMBONES_TIME_SERIES_HOST: '${WebMonitoringServerPrivateIP}',
                    ENABLE_METRICS: 1,
                    JAMBONES_TRACK_ACCOUNT_CALLS: 0,
                    JAMBONES_TRACK_SP_CALLS: 0,
                    JAMBONES_TRACK_APP_CALLS: 0,
                    STATS_HOST: '127.0.0.1',
                    STATS_PORT: 8125,
                    STATS_PROTOCOL: 'tcp',
                    STATS_TELEGRAF: 1,
                    STATS_SAMPLE_RATE: 1,
                    MS_TEAMS_SIP_PROXY_IPS: '52.114.148.0, 52.114.132.46, 52.114.75.24, 52.114.76.76, 52.114.7.24, 52.114.14.70'
                  }
                }
                ]
              };
              EOF
              echo "finished writing config file"

              echo "restarting telegraf"
              # configure telegraph to send to the monitoring server
              sudo sed -i -e "s/influxdb:8086/${WebMonitoringServerPrivateIP}:8086/g"  /etc/telegraf/telegraf.conf
              sudo systemctl restart telegraf

              # point rtpengine to the HEP endpoint on the monitoring server
              sudo sed -i -e "s/--delete-delay 0/--delete-delay 0 --homer=${WebMonitoringServerPrivateIP}:9060 --homer-protocol=udp --homer-id=11/g"  /etc/systemd/system/rtpengine.service
              sudo sed -i -e "s/--address 0.0.0.0 --port 9022/--address 0.0.0.0 --port 9022 --homer ${WebMonitoringServerPrivateIP}:9060 --homer-id 10/g"  /etc/systemd/system/drachtio.service
              sudo systemctl daemon-reload
              sudo sytemctl restart rtpengine
              sudo systemctl restart drachtio

              echo "starting jambonz apps"
              sudo -u admin bash -c "pm2 restart /home/admin/apps/ecosystem.config.js"
              sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u admin --hp /home/admin
              sudo -u admin bash -c "pm2 save"
              sudo systemctl enable pm2-admin.service

              # enable cloudwatch
              echo "Enabling Cloudwatch for jambonz logs"
              sudo sed -i -e "s/retention_in_days\": 3/retention_in_days\": ${CloudwatchLogRetention}/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json 
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json


              echo "user data script completed"
            - VPC_CIDR: !Ref VpcCidrPar
              AWS_REGION: !Ref AWS::Region
              JAMBONES_MYSQL_HOST: !GetAtt AuroraCluster.Endpoint.Address
              JAMBONES_MYSQL_USER: !Ref AuroraUsernamePar
              JAMBONES_MYSQL_PASSWORD: !Ref AuroraPasswordPar
              JAMBONES_REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
              WebMonitoringServerPrivateIP: !GetAtt WebMonitoringServer.PrivateIp
              JWT_SECRET: !Ref EncryptionSecretPar
              CloudwatchLogRetention: !Ref CloudWatchLogRetentionPar
              DbCachingTTS: !Ref DbCachingTTSPar
  
  SbcServerPlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: spread
  
  ### IAM ###
  # Roles
  ServerRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root 
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - 'cloudwatch:PutMetricData'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeTags'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource: 'arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2FullAccess # WIP einschränken

  # Instance Profiles
  FeatureServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ReferenceNamePar}-${EnvironmentPar}-feature-instance-profile'
      Path: /
      Roles:
        - !Ref ServerRole

  SbcServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ReferenceNamePar}-${EnvironmentPar}-sbc-instance-profile'
      Path: /
      Roles:
        - !Ref ServerRole

  WebMonitoringServerIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ReferenceNamePar}-${EnvironmentPar}-web-monitoring-instance-profile'
      Path: /
      Roles:
        - !Ref ServerRole
