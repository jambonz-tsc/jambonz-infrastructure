AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ExistingVpcId:
    Description: 'ID of the existing VPC in which to create the resources'
    Type: 'AWS::EC2::VPC::Id'
  ExistingSubnetId:
    Description: 'ID of the existing Subnet in the VPC into which to place the resources'
    Type: 'AWS::EC2::Subnet::Id'
  InstanceType:
    Description: jambonzMini EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AllowedSshCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address ssh access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    ConstraintDescription: must be a valid network CIDR
  AllowedHttpCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address http(s) access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    ConstraintDescription: must be a valid network CIDR
  AllowedSipCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address sip access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    ConstraintDescription: must be a valid network CIDR
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
  AllowedRtpCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address to send RTP traffic, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    ConstraintDescription: must be a valid network CIDR
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
  VpcCidr:
    Description: CIDR range for the VPC.
    Type: String
    ConstraintDescription: must be a valid network CIDR
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    Default: 10.0.0.0/16
  URLPortal:
    Type: String
    Description: "(Optional) A DNS name for the server (note: you must add a DNS A record in your DNS provider)"
    Default: ""

Conditions:
  DontCreateDNS: !Equals
    - !Ref URLPortal
    - ""
  CreateDNS: !Not
    - !Equals 
      - !Ref URLPortal
      - ""

Mappings:
  AWSRegion2AMI:
    us-east-1:
      Ami: ami-0e8a4b550c34c0b08
    us-east-2:
      Ami: ami-01cc710e15f28a549

Resources:
  jambonzInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [ "AWSRegion2AMI", !Ref AWS::Region,  "Ami"]
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref jambonzSecurityGroup
            - !Ref sshSecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref ExistingSubnetId
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              #!/bin/bash -xe

              # get instance metadata
              PRIVATE_IPV4="$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)" 
              INSTANCE_ID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)" 
              AWS_REGION_NAME="$(curl -s http://169.254.169.254/latest/meta-data/placement/region)" 
              
              # change the database password to a random id
              NEW_DB_PASSWD="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)" 
              echo "alter user 'admin'@'%' identified by '$NEW_DB_PASSWD'" | mysql -h 127.0.0.1 -u admin -D jambones -pJambonzR0ck$ 
              sudo sed -i -e "s/\(.*\)JAMBONES_MYSQL_PASSWORD.*/\1JAMBONES_MYSQL_PASSWORD: '$NEW_DB_PASSWD',/g" /home/admin/apps/ecosystem.config.js 
              
              # replace ip addresses in the ecosystem.config.js file
              sudo sed -i -e "s/\(.*\)PRIVATE_IP\(.*\)/\1$PRIVATE_IPV4\2/g" /home/admin/apps/ecosystem.config.js 
              sudo sed -i -e "s/\(.*\)AWS_REGION_NAME\(.*\)/\1$AWS_REGION_NAME\2/g" /home/admin/apps/ecosystem.config.js 
              sudo sed -i -e "s/\(.*\)--JAMBONES_API_BASE_URL--\(.*\)/\1http:\/\/$PRIVATE_IPV4\/v1\2/g" /home/admin/apps/ecosystem.config.js 
              
              # replace JWT_SECRET
              uuid=$(uuidgen)
              sudo sed -i -e "s/\(.*\)JWT-SECRET-GOES_HERE\(.*\)/\1$uuid\2/g" /home/admin/apps/ecosystem.config.js 

              # reset the database
              JAMBONES_ADMIN_INITIAL_PASSWORD=$INSTANCE_ID JAMBONES_MYSQL_USER=admin JAMBONES_MYSQL_PASSWORD=$NEW_DB_PASSWD JAMBONES_MYSQL_DATABASE=jambones JAMBONES_MYSQL_HOST=127.0.0.1 /home/admin/apps/jambonz-api-server/db/reset_admin_password.js

              # configure webapp
              if [[ -z "${URLPortal}" ]]; then
                # portals will be accessed by IP address of server
                echo "VITE_API_BASE_URL=http://$PRIVATE_IPV4/api/v1" > /home/admin/apps/jambonz-webapp/.env 
                API_BASE_URL=http://$PRIVATE_IPV4/api/v1 TAG="<script>window.JAMBONZ = { API_BASE_URL: '$API_BASE_URL'};</script>"
                sed -i -e "\@</head>@i\ $TAG" /home/admin/apps/jambonz-webapp/dist/index.html
              else
                # portals will be accessed by DNS name
                echo "VITE_API_BASE_URL=http://${URLPortal}/api/v1" > /home/admin/apps/jambonz-webapp/.env 
                API_BASE_URL=http://${URLPortal}/api/v1 TAG="<script>window.JAMBONZ = { API_BASE_URL: '$API_BASE_URL'};</script>"
                sed -i -e "\@</head>@i\ $TAG" /home/admin/apps/jambonz-webapp/dist/index.html
                # add row to system information table 
                mysql -h 127.0.0.1 -u admin -D jambones -p$NEW_DB_PASSWD -e $'insert into system_information (domain_name, sip_domain_name, monitoring_domain_name) values ('\'''"${URLPortal}"''\'', '\''sip.'"${URLPortal}"''\'', '\''grafana.'"${URLPortal}"''\'')'
              
                sudo cat << EOF > /etc/nginx/sites-available/default 
                server {
                    listen 80;
                    server_name ${URLPortal};
                    location /api/ {
                        rewrite ^/api/(.*)$ /\$1 break;
                        proxy_pass http://127.0.0.1:3002;
                        proxy_set_header Host \$host;
                    }
                    location / {
                        proxy_pass http://127.0.0.1:3001;
                        proxy_set_header Host \$host;
                    }
                }
                server {
                  listen 80;
                  server_name api.${URLPortal}; 
                  location / {
                    proxy_pass http://127.0.0.1:3002; 
                    proxy_set_header Host \$host;
                  }
                }
                server {
                  listen 80;
                  server_name grafana.${URLPortal}; 
                  location / {
                    proxy_pass http://127.0.0.1:3010; 
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                  }
                }
                server {
                  listen 80;
                  server_name homer.${URLPortal}; 
                  location / {
                    proxy_pass http://127.0.0.1:9080; 
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                  }
                }
              EOF
              
                sudo systemctl restart nginx
              fi
              
              # restart heplify-server
              sudo systemctl restart heplify-server

              sudo sed -i -e "s/combine_logs: true/combine_logs: false/g" /home/admin/apps/ecosystem.config.js 
              sudo -u admin bash -c "pm2 restart /home/admin/apps/ecosystem.config.js" 
              sudo -u admin bash -c "pm2 save"
              sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u admin --hp /home/admin

              sudo systemctl restart cassandra.service        
              echo "waiting 60 secs for cassandra to start.."
              sleep 60
              echo "now start jaeger"

              # restart jaeger 
              sudo systemctl restart jaeger-collector.service
              sudo systemctl restart jaeger-query.service
              
              # get an apiban key and install it
              APIBANKEY=$(curl -X POST -u jambonz:1a074994242182a9e0b67eae93978826 -d "{\"client\": \"$INSTANCE_ID\"}" -s https://apiban.org/sponsor/newkey | jq -r '.ApiKey')
              sudo sed -i -e "s/API-KEY-HERE/$APIBANKEY/g" /usr/local/bin/apiban/config.json
              sudo /usr/local/bin/apiban/apiban-iptables-client FULL
              
            - URLPortal: !Ref URLPortal

  jambonzSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref ExistingVpcId
      GroupDescription: 'Allow sip, rtp, http and ssh access'
      SecurityGroupIngress:
        - Description: sip over udp
          IpProtocol: udp
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref AllowedSipCidr
        - Description: sip over tcp
          IpProtocol: tcp
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref AllowedSipCidr
        - Description: sip over tls
          IpProtocol: tcp
          FromPort: 5061
          ToPort: 5061
          CidrIp: !Ref AllowedSipCidr
        - Description: sip over wss
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref AllowedSipCidr
        - Description: rtp
          IpProtocol: udp
          FromPort: 40000
          ToPort: 60000
          CidrIp: !Ref AllowedRtpCidr
        - Description: http
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedHttpCidr
        - Description: https
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedHttpCidr
        - Description: homer
          IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: !Ref AllowedHttpCidr
        - Description: grafana
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref AllowedHttpCidr
        - Description: smpp
          IpProtocol: tcp
          FromPort: 3020
          ToPort: 3020
          CidrIp: !Ref ExistingVpcIdCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  sshSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref ExistingVpcId
      GroupDescription: 'Allow sip, rtp, http and ssh access'
      SecurityGroupIngress:
        - Description: ssh
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSshCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

Outputs:
  PortalHttpURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - jambonzInstance
          - PublicIp
    Description: URL for the jambonz portal
    Condition: DontCreateDNS
  PortalURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !Ref URLPortal
    Description: URL for the jambonz portal
    Condition: CreateDNS
  GrafanaURL:
    Value: !Join 
      - ''
      - - 'http://grafana.'
        - !Ref URLPortal
    Description: URL for the grafana portal
    Condition: CreateDNS
  HomerURL:
    Value: !Join 
      - ''
      - - 'http://homer.'
        - !Ref URLPortal
    Description: URL for the homer portal
    Condition: CreateDNS
  ServerIP:
    Value: !GetAtt 
      - jambonzInstance
      - PublicIp
    Description: Server IP address - create a DNS record for this domain as well as subdomains grafana, homer, and jaeger
  User:
    Value: admin
    Description: Login username for the jambonz portal
  Password:
    Value: !Ref jambonzInstance
    Description: Initial password for jambonz portal.  You will be forced to change it once you log in for the first time.